#!groovy

def envSonar = "sonar-env"

pipeline {
    agent { label 'linux' }

    tools {
        maven 'Maven 3.5.X'
        jdk 'JDK 1.8'
    }

    options {
      disableConcurrentBuilds()
      buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '2'))
  	}

    environment {
      def NEXUS_URL  = "http://localhost:8081/nexus/content/repositories/snapshots"
      def NEXUS_REPO = "snapshots"
      def LOCAL_REPO = "-Dmaven.repo.local=${env.WORKSPACE}/.m2/repository"
    }
    
    parameters {
        booleanParam(name: 'CLEAR_WORKSPACE', defaultValue: true)
        booleanParam(name: 'DEPLOY', defaultValue: false)
    }

  stages {
    stage('Clear') {
        when {
            expression { return params.CLEAR_WORKSPACE }
        }              
        steps {
            cleanWs()
        }
    }  
    stage('Initialize') {
      steps {
        checkout scm
        script {
          echo "Building with MAVEN"
          echo "PATH = ${env.PATH}"
          echo "JAVA_HOME = ${env.JAVA_HOME}"
          echo "M2_HOME = ${env.M2_HOME}"
          echo "BRANCH = ${env.BRANCH_NAME}"
          echo "REVISION = ${env.GIT_COMMIT}"
          echo "WORKSPACE = ${env.WORKSPACE}"
        }
      }
    }

    stage('Compile') {
      steps {
        execute("clean assemble", "clean compile -U -DskipTests")
      }
    }

    stage('Test') {
      steps {
        script {
          result = execute("test", "test", true)
          if (result != 0) {
            currentBuild.result = 'UNSTABLE'
            echo 'TEST FAILED!'
          }
        }
      }
    }

    stage('SonarQube') {
      steps {
        withSonarQubeEnv(envSonar) {
          execute("--info sonarqube", "org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar " +
            '-Dsonar.branch.name=' + env.BRANCH_NAME 
          )
        }
      }
    }

    stage('SonarQualityGate') {
      steps {
        echo 'Running the Quality Gate...'
        script {
          timeout(time: 1, unit: 'MINUTES') {
            def qg = waitForQualityGate()
            if (qg.status == 'OK') {
              currentBuild.result = 'SUCCESS'
            } else {
              currentBuild.result = 'UNSTABLE'
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
          }
        }
      }
    }    

    stage('Deploy') {
      when {
        expression { return params.DEPLOY }
      }
      steps {
        script {
          result = execute("deploy", "package -DskipTests", true)
          if (result != 0) {
            currentBuild.result = 'UNSTABLE'
            echo 'DEPLOY FAILED!'
          }
        }
      }
    }

  }

  post {
    always {
      echo 'Post::always executing...'
      script {
        bitbucket()
        if (isGradle()) {
          junit allowEmptyResults: true, keepLongStdio: true, testResults: 'build/reports/**/*.xml,build/test-results/**/*.xml'
        } else {
          junit allowEmptyResults: true, keepLongStdio: true, testResults: 'target/surefire-reports/**/*.xml'
        }
        step([$class: 'JacocoPublisher'])        
      }
    }

    success {
      echo 'Post::success executing...'
      script {
        if (isGradle()) {
          archiveArtifacts artifacts: 'build/libs/**/*.jar', fingerprint: true, allowEmptyArchive: true
        } else {
          archiveArtifacts artifacts: 'target/*.jar', fingerprint: true, allowEmptyArchive: true
        }
      }
    }
  }

}


def cmdGradle(params, returnStatus = false) {
  def result
  if (isUnix()) {
    result = sh script: "chmod +x ./gradlew; ./gradlew --no-daemon --stacktrace --info ${params}", returnStatus: returnStatus
  } else {
    result = bat script: /gradlew.bat --no-daemon --stacktrace --info ${params}/, returnStatus: returnStatus
  }
  return result
}

def cmdMaven(params, returnStatus = false) {
  def result

  if (isUnix()) {
    if (fileExists('mvnw')) {
      configFileProvider(
        [configFile(fileId: 'maven-settings', variable: 'MAVEN_SETTINGS')]) {
        result = sh script: "chmod +x ./mvnw; ./mvnw ${USE_LOCAL_REPO} -s $MAVEN_SETTINGS -B ${params}", returnStatus: returnStatus
      }
    } else {
       result = sh script: "mvn ${params}", returnStatus: returnStatus
    }
  } else {
    if (fileExists('mvnw.bat')) {
      configFileProvider(
            [configFile(fileId: 'maven-settings', variable: 'MAVEN_SETTINGS')]) {
            result = bat script: "mvnw ${USE_LOCAL_REPO} -s $MAVEN_SETTINGS -B ${params}", returnStatus: returnStatus
        }
    } else {
      result = bat script: "mvn ${params}", returnStatus: returnStatus
    }
  }

  return result
}

def isGradle() {
  return fileExists('build.gradle')
}

def execute(gradle, maven, returnStatus = false) {
  if (isGradle()) {
    return cmdGradle(gradle, returnStatus)
  } else {
    return cmdMaven(maven, returnStatus)
  }
}

def bitbucket(){
  currentBuild.result = currentBuild.result ?: 'SUCCESS'
  notifyBitbucket()
}
